# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tamcounter

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python2.7
  stage: production
  region: us-west-2
  profile: personal
  environment: ${file(env.yml)}
  protocol: "http"
  domain: "tamcounter.com"
  api_subdomain: "api"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:DeleteItem"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:dynamodb:"
            - "${self:provider.region}:"
            - "${self:provider.environment.AWS_ACCOUNT}:"
            - "table/"
            - ${self:resources.Resources.usersTable.Properties.TableName}

package:
  include:
    - requirements/**
  exclude:
    - frontend/**
    - node_modules/**

functions:
  get_activity_counts:
    handler: handler.get_activity_counts
    environment:
      ORIGIN: "${self:provider.protocol}://${self:provider.domain}"
    events:
      - http:
          path: get_activity_counts
          method: post
          cors:
            origins:
              - "${self:provider.protocol}://${self:provider.domain}"

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    pathmapping:
        Type: AWS::ApiGateway::BasePathMapping
        Properties:
            BasePath: ""
            DomainName: "${self:provider.api_subdomain}.${self:provider.domain}"
            RestApiId:
                Ref: ApiGatewayRestApi
            # Stage: ${self:provider.stage}